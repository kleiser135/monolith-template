name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

env:
  NODE_VERSION: "20.x"

jobs:
  # Check for dependency updates
  check-updates:
    name: Check for Updates
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
      update_summary: ${{ steps.check.outputs.update_summary }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Check for outdated packages
        id: check
        run: |
          npm outdated --json > outdated.json || true
          
          if [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "Found outdated packages:"
            cat outdated.json | jq '.'
            
            # Create summary
            SUMMARY=$(cat outdated.json | jq -r 'keys | join(", ")' | head -c 200)
            echo "update_summary=Updates available for: $SUMMARY" >> $GITHUB_OUTPUT
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "update_summary=No updates available" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload outdated report
        if: steps.check.outputs.has_updates == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: outdated-packages
          path: outdated.json
          retention-days: 7
          
  # Security vulnerability check
  security-check:
    name: Security Vulnerability Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: |
          npm audit --json > audit.json || true
          
          # Check if there are any vulnerabilities
          VULNERABILITIES=$(cat audit.json | jq '.metadata.vulnerabilities.total // 0')
          echo "Total vulnerabilities found: $VULNERABILITIES"
          
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "Security vulnerabilities detected!"
            cat audit.json | jq '.metadata.vulnerabilities'
            echo "Run 'npm audit fix' to resolve automatic fixes"
          else
            echo "No security vulnerabilities found"
          fi
          
      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit
          path: audit.json
          retention-days: 30
          
  # Create update PR if needed
  create-update-pr:
    name: Create Update PR
    runs-on: ubuntu-latest
    needs: [check-updates, security-check]
    if: needs.check-updates.outputs.has_updates == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Create update branch
        run: |
          BRANCH_NAME="dependency-updates-$(date +%Y%m%d)"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
      - name: Update dependencies
        run: |
          # Update patch and minor versions only (safer approach)
          npx npm-check-updates -u --target minor
          npm install
          
      - name: Run tests to verify updates
        run: |
          npm run lint
          npm run test:once || npm run coverage
          npm run build
          
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git add package.json package-lock.json
          git commit -m "chore: update dependencies
          
          Automated dependency update:
          ${{ needs.check-updates.outputs.update_summary }}
          
          - Updated to latest patch and minor versions
          - All tests passing
          - Security audit clean"
          
      - name: Push changes
        run: |
          git push origin $BRANCH_NAME
          
      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;
            const result = await github.rest.pulls.create({
              title: '🔄 Automated Dependency Updates',
              owner,
              repo,
              head: process.env.BRANCH_NAME,
              base: 'main',
              body: `## 🔄 Automated Dependency Updates
              
              This PR contains automated dependency updates for the project.
              
              ### 📋 Summary
              ${{ needs.check-updates.outputs.update_summary }}
              
              ### ✅ Validation
              - [x] All tests passing
              - [x] Build successful  
              - [x] Linting passed
              - [x] Security audit clean
              
              ### 📝 Notes
              - Only patch and minor version updates included
              - Breaking changes require manual review
              - Auto-generated by GitHub Actions
              
              Please review the changes before merging.`
            });
            
  # Weekly dependency report
  weekly-report:
    name: Weekly Dependency Report
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: [check-updates, security-check]
    steps:
      - name: Download reports
        uses: actions/download-artifact@v4
        with:
          path: reports/
          
      - name: Generate weekly report
        run: |
          echo "# 📊 Weekly Dependency Report - $(date +%Y-%m-%d)" > report.md
          echo "" >> report.md
          echo "## 🔄 Available Updates" >> report.md
          
          if [ -f "reports/outdated-packages/outdated.json" ]; then
            echo "Updates available for the following packages:" >> report.md
            cat reports/outdated-packages/outdated.json | jq -r 'to_entries[] | "- **\(.key)**: \(.value.current) → \(.value.wanted)"' >> report.md
          else
            echo "✅ All dependencies are up to date!" >> report.md
          fi
          
          echo "" >> report.md
          echo "## 🔒 Security Status" >> report.md
          
          if [ -f "reports/security-audit/audit.json" ]; then
            VULNS=$(cat reports/security-audit/audit.json | jq '.metadata.vulnerabilities.total // 0')
            if [ "$VULNS" -gt 0 ]; then
              echo "⚠️ Found $VULNS security vulnerabilities" >> report.md
              cat reports/security-audit/audit.json | jq -r '.metadata.vulnerabilities | to_entries[] | "- **\(.key)**: \(.value)"' >> report.md
            else
              echo "✅ No security vulnerabilities found" >> report.md
            fi
          else
            echo "✅ No security issues detected" >> report.md
          fi
          
          echo "" >> report.md
          echo "Generated on $(date)" >> report.md
          
      - name: Upload weekly report
        uses: actions/upload-artifact@v4
        with:
          name: weekly-dependency-report
          path: report.md
          retention-days: 90
