name: Deploy to Production

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: "20.x"
  
jobs:
  # Pre-deployment validation
  validate:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Check deployment conditions
        id: check
        run: |
          # Only deploy from main branch or tags
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi
          
  # Build for production
  build-production:
    name: Production Build
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --production=false
        
      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Generate deployment bundle
        run: |
          tar -czf deployment-bundle.tar.gz \
            .next/ \
            package.json \
            package-lock.json \
            prisma/ \
            public/ \
            next.config.mjs
            
      - name: Upload deployment bundle
        uses: actions/upload-artifact@v4
        with:
          name: deployment-bundle
          path: deployment-bundle.tar.gz
          retention-days: 30
          
  # Security scanning for production
  security-scan:
    name: Production Security Scan
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
  # Database migration validation
  database-migration:
    name: Database Migration Check
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: production_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Test database migrations
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/production_test" > .env.test
          npx prisma generate
          npx prisma db push
          npx prisma db seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/production_test
          
  # Staging deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, build-production, security-scan, database-migration]
    if: |
      needs.validate.outputs.should_deploy == 'true' && 
      (github.event.inputs.environment == 'staging' || github.ref == 'refs/heads/main')
    steps:
      - name: Download deployment bundle
        uses: actions/download-artifact@v5
        with:
          name: deployment-bundle
          
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "Bundle: $(ls -la deployment-bundle.tar.gz)"
          echo "This would deploy to your staging environment"
          
      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests on staging..."
          echo "This would run basic health checks"
          
  # Production deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, build-production, security-scan, database-migration, deploy-staging]
    if: |
      needs.validate.outputs.should_deploy == 'true' && 
      (github.event.inputs.environment == 'production' || startsWith(github.ref, 'refs/tags/'))
    steps:
      - name: Download deployment bundle
        uses: actions/download-artifact@v5
        with:
          name: deployment-bundle
          
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "Bundle: $(ls -la deployment-bundle.tar.gz)"
          echo "This would deploy to your production environment"
          
      - name: Run production health checks
        run: |
          echo "üè• Running production health checks..."
          echo "This would verify the deployment is healthy"
          
      - name: Notify deployment success
        run: |
          echo "‚úÖ Production deployment completed successfully!"
          echo "Version: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
