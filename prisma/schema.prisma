// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String    @unique
  emailVerified       DateTime?
  password            String
  avatar              String?   // URL to avatar image
  role                String    @default("user") // Role-based access control
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  securityLogs        SecurityLog[]
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model SecurityLog {
  id        String   @id @default(cuid())
  userId    String
  eventType String
  details   String   @db.Text
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  severity  String   @default("low")
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([eventType])
  @@index([timestamp])
  @@index([severity])
}
